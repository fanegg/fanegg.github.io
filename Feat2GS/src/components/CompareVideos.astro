---
interface Props {
  videos: {
    source: string;
    label: string;
    scene: string;
    color?: string;
  }[];
  className?: string;
  defaultLabels?: {
    first: string;
    second: string;
  };
}

const { videos, className = "", defaultLabels = { first: "RADIO", second: "SD" } } = Astro.props;

const scenes = [...new Set(videos.map(v => v.scene))];

const defaultVideo1 = videos.find(v => v.scene === scenes[0] && v.label === defaultLabels.first);
const defaultVideo2 = videos.find(v => v.scene === scenes[0] && v.label === defaultLabels.second);
---

<div 
  class={`compare-videos-container ${className || 'w-full'}`}
  data-first-label={defaultLabels.first}
  data-second-label={defaultLabels.second}
>
    <div class="mb-4 flex gap-2 justify-center">
      {scenes.map((scene) => (
        <button
          class="scene-selector px-4 py-2 text-sm font-bold border rounded-t-lg hover:bg-zinc-400 transition-colors"
          data-scene={scene}
        >
          {scene}
        </button>
      ))}
    </div>

    <div class="grid grid-cols-2 gap-0 mb-4">
        <div class="video1-container relative group">
          <div class="loading-indicator absolute inset-0 flex items-center justify-center bg-black/10 rounded-lg">
            <div class="animate-spin rounded-full h-8 w-8 border-4 border-zinc-300 border-t-zinc-600"></div>
          </div>
          <video
            class="video1 w-full h-auto rounded-lg opacity-0 transition-opacity duration-300"
            muted
            loop
            controls
          >
            <source src={defaultVideo1?.source} type="video/mp4" />
          </video>
          <div class="absolute top-2 left-2 text-white px-2 py-1 rounded" style={`background-color: ${defaultVideo1?.color || '#a1a1aa'}`}>
            {defaultVideo1?.label}
          </div>
        </div>
        <div class="video2-container relative group">
          <div class="loading-indicator absolute inset-0 flex items-center justify-center bg-black/10 rounded-lg">
            <div class="animate-spin rounded-full h-8 w-8 border-4 border-zinc-300 border-t-zinc-600"></div>
          </div>
          <video
            class="video2 w-full h-auto rounded-lg opacity-0 transition-opacity duration-300"
            muted
            loop
            controls
          >
            <source src={defaultVideo2?.source} type="video/mp4" />
          </video>
          <div class="absolute top-2 left-2 text-white px-2 py-1 rounded" style={`background-color: ${defaultVideo2?.color || '#a1a1aa'}`}>
            {defaultVideo2?.label}
          </div>
        </div>
    </div>
    
    <style>
      video::-webkit-media-controls {
        opacity: 0;
        transition: opacity 0.3s;
      }
    
      .group:hover video::-webkit-media-controls {
        opacity: 1;
      }
    
      video::-webkit-media-controls-volume-slider,
      video::-webkit-media-controls-mute-button {
        display: none;
      }
    
      video {
        opacity: 1;
        transition: opacity 0.3s;
      }
    
      video:not(:hover) {
        opacity: 1;
      }
    </style>
  
    <div class="flex flex-nowrap gap-1.5 justify-center">
        {
          videos.map((video) => (
            <button
              class="video-selector px-3 py-1.5 text-sm font-bold border-2 rounded-full hover:bg-gray-100 transition-colors w-22 flex-shrink-0"
              data-source={video.source}
              data-label={video.label}
              data-scene={video.scene}
              data-color={video.color}
              style={`border-color: ${video.color}`}
            >
              {video.label}
            </button>
          ))
        }
    </div>
</div>
<script>
    class VideoController {
      private container: Element;
      private selectedCount: number;
      private selectedSources: { source: string; label: string; color: string }[];
      private currentScene: string;
  
      constructor(container: Element) {
        this.container = container;
        this.selectedCount = 2;
        this.selectedSources = [];
        const firstSceneBtn = this.container.querySelector('.scene-selector');
        this.currentScene = firstSceneBtn?.getAttribute('data-scene') || '';
        
        this.init();
      }
  
      private init() {
      const firstSceneBtn = this.container.querySelector('.scene-selector');
      if (firstSceneBtn) {
        firstSceneBtn.classList.add('bg-zinc-400', 'border-zinc-400', 'text-white');
      }

      const defaultLabels = {
        first: this.container.getAttribute('data-first-label') || 'RADIO',
        second: this.container.getAttribute('data-second-label') || 'SD'
      };

      this.container.querySelectorAll('.video-selector').forEach((btn) => {
        const label = btn.getAttribute('data-label');
        const scene = btn.getAttribute('data-scene');
        if (scene === this.currentScene && (label === defaultLabels.first || label === defaultLabels.second)) {
          const source = btn.getAttribute('data-source') || '';
          const color = btn.getAttribute('data-color') || '#a1a1aa';
          this.selectedSources.push({
            source,
            label: label || '',
            color
          });
        }
      });

      this.bindEvents();
      this.initializeVideos();
      this.updateButtonStyles();
    }
  
    private updateVideos() {
      const video1 = this.container.querySelector('.video1') as HTMLVideoElement;
      const video2 = this.container.querySelector('.video2') as HTMLVideoElement;
      const label1 = video1.parentElement?.querySelector('div[class*="absolute top-2"]') as HTMLDivElement;
      const label2 = video2.parentElement?.querySelector('div[class*="absolute top-2"]') as HTMLDivElement;

      if (this.selectedSources.length >= 2) {
        video1.classList.remove('opacity-100');
        video2.classList.remove('opacity-100');
        video1.parentElement?.querySelector('.loading-indicator')?.classList.remove('hidden');
        video2.parentElement?.querySelector('.loading-indicator')?.classList.remove('hidden');
        
        const sourceElement1 = video1.querySelector('source');
        const sourceElement2 = video2.querySelector('source');
            
        if (sourceElement1 && sourceElement2) {
          sourceElement1.src = this.selectedSources[0].source;
          sourceElement2.src = this.selectedSources[1].source;
          
          if (label1 && label2) {
            label1.textContent = this.selectedSources[0].label;
            label2.textContent = this.selectedSources[1].label;
            label1.style.backgroundColor = this.selectedSources[0].color;
            label2.style.backgroundColor = this.selectedSources[1].color;
          }
          
          video1.load();
          video2.load();
        }
      }
    }
      private setupVideoSync(video1: HTMLVideoElement, video2: HTMLVideoElement) {
        video1.ontimeupdate = null;
        video2.ontimeupdate = null;
        video1.onpause = null;
        video2.onpause = null;
        video1.onplay = null;
        video2.onplay = null;
  
        const syncThreshold = 0.1;
        let isSyncing = false;
  
        video1.ontimeupdate = () => {
          if (!isSyncing && Math.abs(video1.currentTime - video2.currentTime) > syncThreshold) {
            isSyncing = true;
            video2.currentTime = video1.currentTime;
            isSyncing = false;
          }
        };
  
        video2.ontimeupdate = () => {
          if (!isSyncing && Math.abs(video2.currentTime - video1.currentTime) > syncThreshold) {
            isSyncing = true;
            video1.currentTime = video2.currentTime;
            isSyncing = false;
          }
        };
  
        video1.onpause = () => video2.pause();
        video2.onpause = () => video1.pause();
  
        video1.onplay = () => video2.play().catch(() => {});
        video2.onplay = () => video1.play().catch(() => {});
  
        video1.onended = () => {
          video1.currentTime = 0;
          video2.currentTime = 0;
          video1.play();
          video2.play();
        };
        video2.onended = () => {
          video1.currentTime = 0;
          video2.currentTime = 0;
          video1.play();
          video2.play();
        };
      }
  
      private updateButtonStyles() {
        const buttons = this.container.querySelectorAll('.video-selector');
        buttons.forEach((btn) => {
          const button = btn as HTMLElement;
          const btnScene = button.getAttribute('data-scene') || '';
          const source = button.getAttribute('data-source');
          const color = button.getAttribute('data-color') || '#a1a1aa';
          
          button.classList.toggle('hidden', btnScene !== this.currentScene);
          
          if (this.selectedSources.some(item => item.source === source)) {
            button.style.backgroundColor = color;
            button.style.borderColor = color;
            button.classList.add('text-white');
          } else {
            button.style.backgroundColor = '';
            button.style.borderColor = color;
            button.classList.remove('text-white');
          }
        });
      }
  
      private initializeVideos() {
        const video1 = this.container.querySelector('.video1') as HTMLVideoElement;
        const video2 = this.container.querySelector('.video2') as HTMLVideoElement;
        
        if (video1 && video2) {
          video1.addEventListener('loadeddata', () => {
            video1.classList.add('opacity-100');
            video1.parentElement?.querySelector('.loading-indicator')?.classList.add('hidden');
            video1.play().catch(console.error);
          });
          
          video2.addEventListener('loadeddata', () => {
            video2.classList.add('opacity-100');
            video2.parentElement?.querySelector('.loading-indicator')?.classList.add('hidden');
            video2.play().catch(console.error);
          });
          
          this.setupVideoSync(video1, video2);
          
          video1.load();
          video2.load();
        }
      }
  
      private bindEvents() {
        this.container.querySelectorAll('.scene-selector').forEach((btn) => {
          btn.addEventListener('click', () => this.handleSceneSelect(btn));
        });
  
        this.container.querySelectorAll('.video-selector').forEach((btn) => {
          btn.addEventListener('click', () => this.handleVideoSelect(btn));
        });
      }
  
      private handleSceneSelect(btn: Element) {
      const scene = btn.getAttribute('data-scene') || '';
      
      this.container.querySelectorAll('.scene-selector').forEach((b) => {
        b.classList.remove('bg-zinc-400', 'border-zinc-400', 'text-white');
      });
      btn.classList.add('bg-zinc-400', 'border-zinc-400', 'text-white');
      
      this.currentScene = scene;
      this.selectedCount = 0;
      this.selectedSources = [];
      
      const defaultLabels = {
        first: this.container.getAttribute('data-first-label') || 'RADIO',
        second: this.container.getAttribute('data-second-label') || 'SD'
      };
      
      const firstBtn = this.container.querySelector(`.video-selector[data-scene="${scene}"][data-label="${defaultLabels.first}"]`);
      const secondBtn = this.container.querySelector(`.video-selector[data-scene="${scene}"][data-label="${defaultLabels.second}"]`);
      
      if (firstBtn && secondBtn) {
        this.selectedSources.push({
          source: firstBtn.getAttribute('data-source') || '',
          label: defaultLabels.first,
          color: firstBtn.getAttribute('data-color') || '#a1a1aa'
        });
        
        this.selectedSources.push({
          source: secondBtn.getAttribute('data-source') || '',
          label: defaultLabels.second,
          color: secondBtn.getAttribute('data-color') || '#a1a1aa'
        });
        
        this.selectedCount = 2;
        this.updateVideos();
      } else {
        this.resetVideos();
      }
      
      this.updateButtonStyles();
    }
  
      private handleVideoSelect(button: Element) {
        const source = button.getAttribute('data-source') || '';
        const label = button.getAttribute('data-label') || '';
        const color = button.getAttribute('data-color') || '#a1a1aa';
        
        if (this.selectedSources.some(item => item.source === source)) {
          return;
        }
  
        if (this.selectedCount < 2) {
          this.selectedSources.push({ source, label, color });
          this.selectedCount++;
          
          if (this.selectedCount === 2) {
            this.updateVideos();
          }
        } else {
          this.selectedCount = 1;
          this.selectedSources = [{ source, label, color }];
        }
        
        this.updateButtonStyles();
      }
  
      private resetVideos() {
        const video1 = this.container.querySelector('.video1') as HTMLVideoElement;
        const video2 = this.container.querySelector('.video2') as HTMLVideoElement;

        video1.classList.remove('opacity-100');
        video2.classList.remove('opacity-100');
        video1.parentElement?.querySelector('.loading-indicator')?.classList.remove('hidden');
        video2.parentElement?.querySelector('.loading-indicator')?.classList.remove('hidden');
        
        const label1 = video1.parentElement?.querySelector('div') as HTMLDivElement;
        const label2 = video2.parentElement?.querySelector('div') as HTMLDivElement;
        
        video1.querySelector('source')!.src = '';
        video2.querySelector('source')!.src = '';
        label1.textContent = '';
        label2.textContent = '';
        
        video1.load();
        video2.load();
      }
    }
  
    document.querySelectorAll('.compare-videos-container').forEach(container => {
      new VideoController(container);
    });
  </script>